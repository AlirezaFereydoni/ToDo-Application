{"version":3,"sources":["components/input/Input.js","components/Button/Button.js","components/Task/Task.js","components/Modal/Modal.js","components/Pagination/Pagination.js","containers/TodoBuilderStyle.js","containers/TodoBuilder.js","store/actions.js","store/actionTypes.js","App.js","serviceWorker.js","store/reducer.js","index.js","store/localStorage.js"],"names":["Inputs","styled","input","Input","value","changed","enterPress","focus","type","onKeyDown","onChange","autoFocus","Btn","button","Button","children","clicked","onClick","Sec","div","Message","props","complete","Icon","i","Task","completed","checked","done","edited","className","style","fontSize","removed","Wrapper","Popup","Modal","submitEdit","closeModal","setEdit","e","keyCode","target","PaginationWrapper","Paginate","PaginationOutlined","useState","currentPage","setCurrentPage","pageNumber","count","push","map","item","key","Number","TaskWrapper","SubmitSection","Header","h1","headerColor","Title","h3","TodoBuilder","store","useSelector","state","task","setTask","first","last","pagination","setPagination","open","currentId","edit","modal","setModal","dispatch","useDispatch","submitTask","preventDefault","id","uuid","message","Todo","situation","slice","text","val","find","Math","ceil","length","App","Boolean","window","location","hostname","match","initialStore","reducer","action","filter","persistedStore","loadingState","localStorage","getItem","JSON","parse","err","loadState","createStore","subscribe","savingState","stringify","setItem","console","log","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ee3fecb4.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Inputs = styled.input`\n  width: 28rem;\n  height: 2.6rem;\n  margin: 0 1rem;\n  @media (max-width: 825px) {\n    width: 20rem;\n  }\n  @media (max-width: 580px) {\n    width: 15rem;\n  }\n  @media (max-width: 496px) {\n    width: 9rem;\n  }\n`;\n\nconst Input = ({ value, changed, enterPress, focus = false }) => {\n  return (\n    <Inputs type=\"text\" value={value} onKeyDown={enterPress} onChange={changed} autoFocus={focus} />\n  );\n};\n\nexport default Input;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Btn = styled.button`\n  width: 9rem;\n  height: 3rem;\n  border-radius: 0.2rem;\n  border: none;\n  background-color: green;\n  color: white;\n  cursor: pointer;\n  @media (max-width: 825px) {\n    width: 7rem;\n  }\n  @media (max-width: 580px) {\n    width: 6.5rem;\n  }\n  @media (max-width: 496px) {\n    width: 5rem;\n  }\n`;\n\nconst Button = ({ children = \"Submit\", clicked }) => {\n  return <Btn onClick={clicked}>{children}</Btn>;\n};\n\nexport default Button;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Sec = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 15fr 1fr 1fr;\n  grid-gap: 0.5rem;\n  padding: 0.5rem 1.5rem;\n  width: 36rem;\n  height: 3rem;\n  border: 1px solid #aeaeae;\n  align-items: center;\n  border-radius: 0.5rem;\n  margin: 0.8rem 0;\n  @media (max-width: 825px) {\n    width: 25rem;\n  }\n  @media (max-width: 580px) {\n    width: 20rem;\n  }\n  @media (max-width: 496px) {\n    width: 12rem;\n  }\n`;\n\nconst Input = styled.input`\n  width: 1rem;\n  height: 1rem;\n`;\n\nconst Message = styled.div`\n  text-decoration: ${props => (props.complete === true ? \"line-through\" : \"none\")};\n  overflow: hidden;\n`;\n\nconst Icon = styled.i`\n  font-size: 2.2rem;\n  color: red;\n  font-weight: bold;\n  cursor: pointer;\n`;\n\nconst Task = props => {\n  return (\n    <Sec>\n      <Input type=\"checkbox\" onChange={props.completed} checked={props.done} />\n      <Message complete={props.done}>{props.value}</Message>\n      <Icon onClick={props.edited} className=\"fas fa-edit\" style={{ fontSize: \"1rem\" }}></Icon>\n      <Icon onClick={props.removed}>&#215;</Icon>\n    </Sec>\n  );\n};\n\nexport default Task;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Input from \"./../input/Input\";\nimport Button from \"./../Button/Button\";\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.6);\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  z-index: 9;\n`;\n\nconst Popup = styled.div`\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 45rem;\n  padding: 2rem 3.5rem;\n  height: 10rem;\n  border-radius: 0.8rem;\n  display: flex;\n  background-color: white;\n  justify-content: center;\n  align-items: center;\n  z-index: 10;\n  @media (max-width: 825px) {\n    width: 30rem;\n  }\n  @media (max-width: 580px) {\n    width: 25rem;\n  }\n  @media (max-width: 496px) {\n    width: 16rem;\n  }\n`;\n\nconst Modal = ({ value, submitEdit, closeModal, setEdit }) => {\n  return (\n    <>\n      <Wrapper onClick={closeModal} />\n      <Popup>\n        <Input\n          value={value}\n          enterPress={e => (e.keyCode === 13 ? submitEdit(e) : null)}\n          focus={true}\n          changed={e => setEdit(e.target.value)}\n        />\n        <Button clicked={submitEdit}>Edit</Button>\n      </Popup>\n    </>\n  );\n};\n\nexport default Modal;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst PaginationWrapper = styled.div`\n  display: flex;\n  padding: 1rem 2rem;\n  justify-content: center;\n  align-items: center;\n  width: 50%;\n  height: 3rem;\n  margin: 0 auto;\n`;\n\nconst Paginate = styled.div`\n  width: 2.5rem;\n  height: 2.5rem;\n  border-radius: 50%;\n  border: 1px solid #aeaeae;\n  background-color: white;\n  color: black;\n  font-size: 1.2rem;\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0.5rem;\n\n  &:active,\n  &:focus,\n  &:visited,\n  &.active {\n    background-color: #aeaeae;\n    color: white;\n  }\n`;\n\nexport default function PaginationOutlined(props) {\n  const [currentPage, setCurrentPage] = useState(1);\n  const pageNumber = [];\n  for (let i = 1; i < props.count; i++) {\n    pageNumber.push(i);\n  }\n\n  return (\n    <PaginationWrapper>\n      {pageNumber.map(item => (\n        <Paginate\n          key={item}\n          className={currentPage === item && \"active\"}\n          onClick={() => props.changed(Number(item), setCurrentPage(item))}\n        >\n          {item}\n        </Paginate>\n      ))}\n    </PaginationWrapper>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  width: 50rem;\n  height: 90%;\n  min-height: 80vh;\n  border-radius: 0.8rem;\n  border: 1px solid #aeaeae;\n  margin: 3.5rem auto;\n  padding: 2rem 0;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  @media (max-width: 825px) {\n    width: 35rem;\n  }\n  @media (max-width: 580px) {\n    width: 30rem;\n  }\n  @media (max-width: 496px) {\n    width: 19rem;\n  }\n`;\n\nexport const TaskWrapper = styled(Wrapper)`\n  min-height: 5rem;\n  height: 70%;\n  width: 45rem;\n  padding: 2rem 0;\n  border: none;\n  margin: 0 auto;\n  justify-content: center;\n  align-items: center;\n  @media (max-width: 825px) {\n    width: 30rem;\n  }\n  @media (max-width: 580px) {\n    width: 25rem;\n  }\n  @media (max-width: 496px) {\n    width: 16rem;\n  }\n`;\n\nexport const SubmitSection = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 auto;\n  @media (max-width: 825px) {\n    max-width: 29rem;\n    margin: 0 auto;\n  }\n`;\n\nexport const Header = styled.h1`\n  font-size: 2.5rem;\n  color: ${props => (props.headerColor ? props.headerColor : \"green\")};\n  margin: 0rem auto 2.5rem auto;\n  @media (max-width: 496px) {\n    font-size: 1.5rem;\n  }\n`;\n\nexport const Title = styled.h3`\n  font-size: 1rem;\n  justify-self: flex-end;\n  width: 90%;\n  color: #aeaeae;\n  margin-left: 2rem;\n`;\n","import React, { useState } from \"react\";\nimport uuid from \"react-uuid\";\nimport Input from \"./../components/input/Input\";\nimport Button from \"./../components/Button/Button\";\nimport Task from \"./../components/Task/Task\";\nimport * as actions from \"./../store/actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Modal from \"./../components/Modal/Modal\";\nimport Pagination from \"../components/Pagination/Pagination\";\nimport * as Style from \"./TodoBuilderStyle\";\n\nconst TodoBuilder = props => {\n  const store = useSelector(state => state);\n  const [task, setTask] = useState(\"\");\n  const [pagination, setPagination] = useState({ currentPage: 1, first: 0, last: 4 });\n  const [modal, setModal] = useState({ open: false, currentId: null, edit: \"\" });\n  const dispatch = useDispatch();\n  const perPage = 4;\n\n  const submitTask = e => {\n    e.preventDefault();\n    dispatch(actions.addItem(uuid(), task));\n    setTask(\"\");\n  };\n\n  const editSubmit = e => {\n    e.preventDefault();\n    dispatch(actions.editItem(modal.currentId, modal.edit));\n    setModal({ edit: \"\", open: false });\n  };\n\n  const Todo = situation => {\n    return store.slice(pagination.first, pagination.last).map(\n      item =>\n        item.completed === situation && (\n          <Task\n            key={item.id}\n            value={item.message}\n            done={item.completed}\n            completed={() => dispatch(actions.completeItem(item.id))}\n            removed={() => dispatch(actions.removeItem(item.id))}\n            edited={() => {\n              setModal({ open: true, currentId: item.id, edit: item.message });\n            }}\n          />\n        )\n    );\n  };\n  return (\n    <Style.Wrapper>\n      {modal.open && (\n        <Modal\n          value={modal.edit}\n          closeModal={() => setModal({ ...modal, open: false })}\n          submitEdit={editSubmit}\n          setEdit={val => setModal({ ...modal, edit: val })}\n        />\n      )}\n\n      <Style.Header>TODO APPLICATION</Style.Header>\n\n      <Style.SubmitSection>\n        <Input\n          value={task}\n          enterPress={e => (e.keyCode === 13 ? submitTask(e) : null)}\n          focus={true}\n          changed={e => setTask(e.target.value)}\n        />\n        <Button clicked={submitTask}>ADD</Button>\n      </Style.SubmitSection>\n\n      <Style.TaskWrapper>\n        {store.find(item => item.completed === false) && <Style.Title>Do It</Style.Title>}\n        {Todo(false)}\n        {store.find(item => item.completed === true) && <Style.Title>Completed</Style.Title>}\n        {Todo(true)}\n      </Style.TaskWrapper>\n\n      <Pagination\n        count={Math.ceil(store.length / perPage) + 1}\n        changed={value =>\n          setPagination({ currentPage: value, first: (value - 1) * perPage, last: value * perPage })\n        }\n      />\n    </Style.Wrapper>\n  );\n};\n\nexport default TodoBuilder;\n","import * as actionTypes from \"./actionTypes\";\n\nexport const addItem = (id,text) => {\n    return {\n        type:actionTypes.ITEM_ADDED,\n        id:id,\n        message:text\n    }\n}\n\nexport const removeItem = (id) => {\n    return {\n        type:actionTypes.ITEM_REMOVED,\n        id:id\n    }\n}\n\nexport const completeItem = (id) => {\n    return {\n        type:actionTypes.ITEM_COMPLETED,\n        id:id,\n        \n    }\n}\n\n\nexport const editItem = (id,text) => {\n    return {\n        type:actionTypes.ITEM_EDITED,\n        id:id,\n        message:text\n    }\n}","export const ITEM_ADDED = \"ITEM_ADDED\";\nexport const ITEM_COMPLETED = \"ITEM_COMPLETED\";\nexport const ITEM_REMOVED = \"ITEM_REMOVED\";\nexport const ITEM_EDITED = \"ITEM_EDITED\";","\nimport React from \"react\";\nimport TodoBuilder from './containers/TodoBuilder';\n\n\nfunction App() {\n  return <TodoBuilder/>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from \"./actionTypes\";\n\nconst initialStore = [];\n// let lastId = 0;\n\nconst reducer = (state = initialStore,action) => {\n    switch(action.type) {\n        case actionTypes.ITEM_ADDED: return [\n            ...state,\n            {\n                id:action.id,\n                message:action.message,\n                completed:false\n            }\n        ]\n        case actionTypes.ITEM_REMOVED: return [\n            ...state.filter(item=>item.id !== action.id)\n        ]\n        case actionTypes.ITEM_COMPLETED: return [\n            ...state.map(item => item.id === action.id ? {...item,completed:!item.completed}: item)\n        ]\n        case actionTypes.ITEM_EDITED: return [\n            ...state.map(item => item.id === action.id ? {...item,message:action.message} : item)\n        ]\n        default: return state;\n    }\n}\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport reducer from \"./store/reducer\";\nimport {loadState , saveState} from \"./store/localStorage\";\n\nconst persistedStore = loadState();\nconst store = createStore(reducer,persistedStore)\nstore.subscribe(()=> {\n  saveState(store.getState())\n})\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n   </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const loadState = () => {\n    try {\n        const loadingState = localStorage.getItem(\"todo\")\n        if(loadingState === null) {\n            return undefined;\n        }\n        return JSON.parse(loadingState);\n    }\n     catch(err) {\n         return undefined;\n     }\n}\n\n\nexport const saveState = (state) => {\n    try {\n        const savingState =JSON.stringify(state);\n        localStorage.setItem(\"todo\",savingState);\n    }catch(err) {\n        console.log(err)\n    }\n\n}"],"sourceRoot":""}